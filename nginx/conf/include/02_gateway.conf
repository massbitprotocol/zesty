include extensions/subconf/upstream_ws.conf;
include extensions/subconf/upstream.conf;
server {
    listen 80;
    server_name gw.massbitroute.net;
    #proxy_cache cache_gateway;
    location /api/v1/ {
        set $api_method "";
        set $user_id "";
        set $api "";
        access_by_lua_block {
            local main = require('mbr/main')
            main.auth()
            main.filter_rpc_body()
        }
        #vhost_traffic_status_filter_by_set_key $api_method user::$user_id::api::$api::v1::api_method;
        #add_header X-Mbr-api
        proxy_pass http://upstream_datasources/;
    }
    location /internal/ {
        internal;
        # proxy_pass_request_body off;
        # proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $request_uri;
        proxy_pass              http://127.0.0.1:3000/;
    }
    location /v1/ {
        #include extensions/subconf/dscache.conf;
        set $websocket 1;
        if ($http_connection !~* "upgrade") {
            set $websocket 0;
        }
        if ($http_upgrade !~* "websocket") {
            set $websocket 0;
        }
        if ($websocket) {
            rewrite /v1/(?<api>.[-_a-zA-Z0-9]+) /ws1/$api last;
        }
        set $api_method "";

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            #add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range, Authorization' always;
        }
        if ($request_method = 'GET') {
            #add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range, Authorization' always;
        }
        proxy_buffering off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;

        access_by_lua_block {
            local main = require('mbr/main')
            main.parse_rpc_body()
        }
        vhost_traffic_status_filter_by_set_key $api_method type::gateway::uri::$request_uri; 
        proxy_pass http://upstream_datasources/;
    }
    location /ws1/ {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://ws_upstream_datasources/;
    }
    # location /ws2/ {
    #     set $api '';
    #     rewrite /ws1/(?<api>.[-_a-zA-Z0-9]+) / break;
    #     resolver 8.8.8.8 ipv6=off;
    #     proxy_ssl_server_name on;
    #     add_header X-Api $api;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $connection_upgrade;
    #     #proxy_redirect off;
    #     #proxy_set_header Host $host;
    #     #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     #proxy_pass https://eth-goerli.g.alchemy.com/v2/cpmRyCYZJDkdte237RoYGX17HYpkG-th;
    #     proxy_pass http://ws_upstream_datasources/;
    # }
    # location /v1/ {
    #     #include extensions/subconf/dscache.conf;
    #     default_type 'application/json';   
    #     resolver 8.8.8.8 ipv6=off;
    #     proxy_ssl_server_name on;
    #     #rewrite /v1/(?<api>.[-_a-zA-Z0-9]+) / ;
    #     set_by_zesty;
    #     set $api_method "";
    #     access_by_lua_block {
    #         local main = require('mbr/main')
    #         main.parse_rpc_body()
    #     }
    #     vhost_traffic_status_filter_by_set_key $api_method type::gateway::uri::$request_uri; 
    #     vhost_traffic_status_filter_by_set_key $api_method type::node::uri::$request_uri::reqid::$reqid;
    #     # if ($proxy = '') {
    #     #     return 404 'Api does not exist or missing blockchain node';
    #     # }
    #     proxy_pass $proxy;
    # }
}

server {
    listen 443;
    server_name gw.massbitroute.net;
    #include extensions/subconf/ssl.conf;
    return 301 http://$host$request_uri;
}
